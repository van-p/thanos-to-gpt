package Automation.Payments.customer.helpers;

import Automation.Access.customer.helpers.AccessEnums;
import Automation.Access.customer.helpers.AccessHelper;
import Automation.Access.dash.helpers.DashAccessHelper;
import Automation.Payments.customer.api.PaymentApiDetails;
import Automation.Payments.customer.api.PaymentJsonDetails;
import Automation.Payments.customer.web.*;
import Automation.Payments.dash.api.DashPaymentApiDetails;
import Automation.Payments.dash.api.DashPaymentJsonDetails;
import Automation.Payments.dash.helpers.DashPaymentHelper;
import Automation.SaaS.customer.helpers.SaasEnums;
import Automation.Utils.Api.ApiDetails;
import Automation.Utils.Api.ApiDetails.Headers;
import Automation.Utils.Api.ApiHelper;
import Automation.Utils.AssertHelper;
import Automation.Utils.Config;
import Automation.Utils.DataGenerator;
import Automation.Utils.WaitHelper;
import io.restassured.response.Response;
import org.apache.commons.lang3.StringUtils;
import org.json.JSONArray;
import org.json.JSONObject;

import java.util.List;
import java.util.Objects;
import java.util.stream.IntStream;

public class PaymentHelper extends ApiHelper
{

    public static PaymentStaticDataBase paymentStaticDataBase;
    public RecipientListPage recipientsPage;
    public NewRecipientPage newRecipientPage;
    public TransferPage transferPage;
    public ReviewTransferPage reviewTransferPage;
    public TransferSuccessOverviewPage transferSuccessOverviewPage;
    public TransferSuccessDetailPage transferSuccessDetailPage;
    public FxTransferSuccessDetailPage fxTransferSuccessDetailPage;
    public DebitDetailPage debitDetailPage;
    public TransactionsPage transactionsPage;
    public AdvanceLimitPage advanceLimitPage;
    public AdditionalInformationPage additionalInformationPage;
    public ModifyPendingTransferPage modifyPendingTransferPage;

    public TransferSubmittedDetailPage transferSubmittedDetailPage;
    public FxTransferPage fxTransferPage;
    public ReviewFxTransferPage reviewFxTransferPage;
    public FxTransferSuccessOverviewPage fxTransferSuccessOverviewPage;

    public PaymentHelper(Config testConfig, int... respectiveSheetRowNumbers)
    {
        super(testConfig, new String[]{"UserDetails"}, respectiveSheetRowNumbers);
        initialiseStaticData();
    }

    public PaymentHelper(Config testConfig, String[] sheets, int... respectiveSheetRowNumbers)
    {
        super(testConfig, sheets, respectiveSheetRowNumbers);
        initialiseStaticData();
    }

    public PaymentHelper(Config testConfig)
    {
        super(testConfig);
        initialiseStaticData();
    }

    public void initialiseStaticData()
    {
        if (Config.appLanguage != null)
        {
            AccessEnums.CustomerPortalLanguage.valueOf(Config.appLanguage);
            paymentStaticDataBase = new PaymentStaticDataEn();
        } else
        {
            paymentStaticDataBase = new PaymentStaticDataEn();
        }
    }

    public Response sendRequestAndGetResponse(PaymentApiDetails paymentApiDetails, PaymentJsonDetails paymentJsonDetails)
    {
        switch (paymentApiDetails)
        {
            case RequirementDataSubmit -> testConfig.putRunTimeProperty("submit", "1");
            case GetRecipient ->
            {
                testConfig.putRunTimeProperty("page", 1);
                testConfig.putRunTimeProperty("limit", 10);
            }
            case MakeLocalTransfer ->
            {
                testConfig.putRunTimeProperty("transferAmount", DataGenerator.generateRandomNumberInIntRange(10000, 15000));
                testConfig.putRunTimeProperty("categoryName", SaasEnums.DebitCategory.getRandomCategory().getCategory());
            }
            case GetDebitTransactionsListByBudget ->
            {
                testConfig.putRunTimeProperty("source_type", AccessEnums.BusinessType.DebitAccount.getType());
                testConfig.putRunTimeProperty("source_uuid", testConfig.getRunTimeProperty("debitAccountUuid"));
            }

            case GetPendingActions, DeletePendingActions ->
            {
                testConfig.putRunTimeProperty("source_uuid", testConfig.testData.get("sourceUuid"));
                testConfig.putRunTimeProperty("source_type", testConfig.testData.get("sourceType"));
                testConfig.putRunTimeProperty("state_code", testConfig.testData.get("stateCode"));
            }
            case CreatePendingActions ->
            {
                testConfig.putRunTimeProperty("autoGeneratedReference", DataGenerator.generateRandomGuid());
                testConfig.putRunTimeProperty("sourceUuid", testConfig.getRunTimeProperty(Headers.xexampleBusinessUuid.getValue()));
            }
            case GetDebitAccountWithQueryParams ->
            {
                String url = paymentApiDetails.getUrl(testConfig, testConfig.getRunTimeProperty("business_uuid"));
                return executeRequestAndGetResponse(url, paymentApiDetails.getApiRequestType(), paymentApiDetails.getApiContentType(), getHeaders(paymentApiDetails), getParams(paymentApiDetails), getFormData(paymentApiDetails), getJsonData(paymentJsonDetails));
            }
            case GetTransactionByReferenceId ->
            {
                testConfig.putRunTimeProperty("source_uuid", testConfig.testData.get("accountUuid"));
                testConfig.putRunTimeProperty("source_type", "business");
                testConfig.putRunTimeProperty("_filters[search]", testConfig.testData.get("reference"));
            }
        }
        return executeRequestAndGetResponse(paymentApiDetails, paymentJsonDetails);
    }

    public void verifyApiResponse(Response response, PaymentApiDetails paymentApiDetails, PaymentJsonDetails paymentJsonDetails)
    {
        switch (paymentApiDetails)
        {
            case GetRecipient:
                switch (paymentJsonDetails)
                {
                    case GetRecipientSuccessfulResponse, GetRecipientSuccessfulResponseSGD, GetAdvanceRecipientSuccessfulResponseSGD, GetRecipientSuccessfulCurrenciesResponse ->
                            verifyGetSgdRecipient(response);
                    case GetRecipientSuccessfulResponseCAD, GetRecipientSuccessfulResponseTHB, GetRecipientSuccessfulResponseIDR ->
                            verifyRecipientsListWithCurrencyCode(response);
                    default -> testConfig.logFail("Key-values are not being verified for " + paymentJsonDetails.name());
                }
                break;
            case CreateFxQuotes:
                switch (paymentJsonDetails)
                {
                    case CreateFxQuotesSuccessfulResponse -> verifyCreateFxQuotes(response);
                    case CreateUsdFxQuoteOnWeekendResponse -> verifyMakeUsdFxTransferWeekend(response);
                    default -> testConfig.logFail("Key-values are not being verified for " + paymentJsonDetails.name());
                }
                break;
            case MakeFxTransfer:
                switch (paymentJsonDetails)
                {
                    case MakeFxTransferSuccessfulResponse -> verifyMakeFxTransfer(response);
                    case MakeFxTransferWithoutFeeTypeSuccessResponse -> verifyTransferWithoutFeeResponse(response);
                    default -> testConfig.logFail("Key-values are not being verified for " + paymentJsonDetails.name());
                }
                break;
            case MakeLocalTransfer:
            case MakeLocalTransferWithOtp:
                switch (paymentJsonDetails)
                {
                    case MakeLocalTransferSuccessfulResponse -> verifyMakeAdvanceTransfer(response);
                    case MakeLocalTransferWithBudgetSuccessfulResponse ->
                            verifyLocalTransferWithBudgetCorrect(response);
                    default -> testConfig.logFail("Key-values are not being verified for " + paymentJsonDetails.name());
                }
                break;
            case GetDebitAccount:
                switch (paymentJsonDetails)
                {
                    case GetDebitAccountSuccessfulResponse, GetDebitAccountSuccessfulCurrenciesResponse ->
                            verifyGetDebitAccount(response);
                    case GetSingleDebitAccountResponse, GetDoubleDebitAccountsResponse, GetTripleDebitAccountsResponse ->
                            verifyIfSpecificDebitAccountPresent(response);
                    default -> testConfig.logFail("Key-values are not being verified for " + paymentJsonDetails.name());
                }
                break;
            case RequirementData:
                switch (paymentJsonDetails)
                {
                    case RequirementDataSuccessfulResponse -> verifyRequirementData(response);
                    case RequirementDataSuccessfulTransferWiseResponse -> verifyTransferWiseRequirementData(response);
                    default -> testConfig.logFail("Key-values are not being verified for " + paymentJsonDetails.name());
                }
                break;
            case RequirementDataSubmit:
                switch (paymentJsonDetails)
                {
                    case RequirementDataSubmitSuccessfulResponse -> verifyRequirementDataSubmit(response);
                    case RequirementDataSubmitTransferWiseResponse -> verifyTransferWiseRequirementData(response);
                    default -> testConfig.logFail("Key-values are not being verified for " + paymentJsonDetails.name());
                }
                break;
            case GetPendingActions:
                switch (paymentJsonDetails)
                {
                    case GetPendingActionsSuccessfulResponse -> verifyPendingActions(response);
                    case EmptyResponse ->
                    {
                        verifyAndUpdatePendingActionsList(response);
                        paymentJsonDetails = null;
                    }
                    default -> testConfig.logFail("Key-values are not being verified for " + paymentJsonDetails.name());
                }
                break;
            case CreatePendingActions:
                if (Objects.requireNonNull(paymentJsonDetails) == PaymentJsonDetails.CreatePendingActionLocalFxSuccessfulResponse)
                {
                    verifyCreatedPendingActions(response);
                } else
                {
                    testConfig.logFail("Key-values are not being verified for " + paymentJsonDetails.name());
                }
                break;
            case ApprovePendingAction:
                if (Objects.requireNonNull(paymentJsonDetails) == PaymentJsonDetails.ApprovePendingActionLocalFxSuccessfulResponse)
                {
                    verifyApprovedPendingActions(response);
                } else
                {
                    testConfig.logFail("Key-values are not being verified for " + paymentJsonDetails.name());
                }
                break;
            case GetChargeAccount:
                if (Objects.requireNonNull(paymentJsonDetails) == PaymentJsonDetails.GetChargeAccountSuccessfulResponse)
                {
                    verifyGetChargeAccount(response);
                } else
                {
                    testConfig.logFail("Key-values are not being verified for " + paymentJsonDetails.name());
                }
                break;
            case GetTransactionDetail:
                switch (paymentJsonDetails)
                {
                    case GetQuarantinedTransactionResponse, GetQuarantinedTransactionResponseIDR ->
                            verifyQuarantinedTransaction(response);
                    case GetSgdTransactionDetailResponse -> verifySgdTransactionDetail(response);
                    default -> testConfig.logFail("Key-values are not being verified for " + paymentJsonDetails.name());
                }
                break;
            case GetDebitTransactionsListByBudget:
                if (Objects.requireNonNull(paymentJsonDetails) == PaymentJsonDetails.GetDebitTransactionsListResponse)
                {
                    verifyDebitTransactionsListResponse(response);
                } else
                {
                    testConfig.logFail("Key-values are not being verified for " + paymentJsonDetails.name());
                }
                break;
            case DeletePendingActions:
                switch (paymentJsonDetails)
                {
                    case EmptyResponse ->
                    {
                        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
                        AssertHelper.compareEquals(testConfig, "Response body", "[]", response.body().asString());
                    }
                    case GetCleanUpResponse ->
                    {
                        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
                        paymentJsonDetails = null;
                    }
                    default -> testConfig.logFail("Key-values are not being verified for " + paymentJsonDetails.name());
                }
                break;
            case GetTransactionByReferenceId:
                if (Objects.requireNonNull(paymentJsonDetails) == PaymentJsonDetails.GetTransactionByReferenceIdResponse)
                {
                    AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
                    testConfig.putRunTimeProperty("transactionUuid", response.jsonPath().getString("data[0].uuid"));
                } else
                {
                    testConfig.logFail("Key-values are not being verified for " + paymentJsonDetails.name());
                }
                break;
            default:
                testConfig.logFail("Key-values are not being verified for API - " + paymentApiDetails.name());
        }

        if (paymentJsonDetails != null)
        {
            verifyJsonResponse(response, paymentApiDetails, paymentApiDetails.name(), paymentJsonDetails, paymentJsonDetails.name());
        }
    }

    private void verifyRecipientsListWithCurrencyCode(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
        JSONArray array = new JSONArray(new JSONObject(response.body().asString()).getJSONArray("data"));
        IntStream.range(0, array.length()).forEach(i ->
        {
            JSONObject counterparty = array.getJSONObject(i);
            if (testConfig.testData.get("recipientCurrencyCode") != null)
            {
                AssertHelper.compareEquals(testConfig, "Currency code", testConfig.testData.get("recipientCurrencyCode"), counterparty.getString("currency_code"));
            } else
            {
                AssertHelper.compareEquals(testConfig, "Currency code", testConfig.getRunTimeProperty("search"), counterparty.getString("currency_code"));
            }
            AssertHelper.compareEquals(testConfig, "Currency code", testConfig.testData.get("recipientCurrencyCode"), counterparty.getString("currency_code"));
            testConfig.putRunTimeProperty("recipientBankCode", counterparty.getString("bank_code"));
            testConfig.putRunTimeProperty("counterPartyUuid", counterparty.getString("uuid"));
        });
    }

    private void verifyAndUpdatePendingActionsList(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
        if (!response.jsonPath().getList("uuid").isEmpty())
        {
            testConfig.putRunTimeProperty("pendingActionUuid", response.jsonPath().getList("uuid").get(0));
            testConfig.putRunTimeProperty("pendingActionList", response.jsonPath().getList("uuid"));
            AssertHelper.compareEquals(testConfig, "recipient_name", testConfig.testData.get("recipientName"), response.jsonPath().getList("payload.recipient_account_name").get(0));
            AssertHelper.compareEquals(testConfig, "source_currency_code", testConfig.testData.get("sourceCurrencyCode"), response.jsonPath().getList("payload.source_currency_code").get(0));
            AssertHelper.compareEquals(testConfig, "target_currency_code", testConfig.testData.get("targetCurrencyCode"), response.jsonPath().getList("payload.target_currency_code").get(0));
            AssertHelper.compareEquals(testConfig, "source_amount", testConfig.testData.get("sourceAmount"), response.jsonPath().getList("payload.source_amount").get(0).toString());
            AssertHelper.compareEquals(testConfig, "authorizations.approve", false, response.jsonPath().getList("authorizations.approve").get(0));
        }
    }

    private void verifyTransferWithoutFeeResponse(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 201, response.statusCode());
        AssertHelper.compareEquals(testConfig, "Source currency code", testConfig.getRunTimeProperty("currencyCode"), response.body().jsonPath().getString("fx_transfer.quote.source_currency_code"));
        AssertHelper.compareEquals(testConfig, "Source amount", testConfig.getRunTimeProperty("sourceAmount"), response.body().jsonPath().getString("amount").substring(1));
        AssertHelper.compareEquals(testConfig, "FX quote uuid", testConfig.getRunTimeProperty("fxQuoteUuid"), response.body().jsonPath().getString("fx_transfer.quote_uuid"));
        AssertHelper.compareEquals(testConfig, "Rate", testConfig.getRunTimeProperty("rate"), response.body().jsonPath().getString("fx_transfer.quote.rate"));
        AssertHelper.compareContains(testConfig, "Target amount", testConfig.getRunTimeProperty("targetAmount"), response.jsonPath().getString("fx_transfer.quote.target_amount"));
        AssertHelper.compareEquals(testConfig, "Target currency", testConfig.getRunTimeProperty("recipientCurrencyCode"), response.jsonPath().getString("fx_transfer.quote.target_currency_code"));
        AssertHelper.compareEquals(testConfig, "Counterparty uuid", testConfig.getRunTimeProperty("counterPartyUuid"), response.jsonPath().getString("fx_transfer.quote.business_partner.uuid"));
        AssertHelper.compareEquals(testConfig, "Counterparty bank code", testConfig.getRunTimeProperty("recipientBankCode"), response.jsonPath().getString("fx_transfer.quote.business_partner.bank_code"));
        AssertHelper.compareEquals(testConfig, "Counterparty name", testConfig.getRunTimeProperty("recipientName"), response.jsonPath().getString("fx_transfer.quote.business_partner.account_holder_name"));
        AssertHelper.compareEquals(testConfig, "Counterparty bank account number", testConfig.getRunTimeProperty("recipientBankAccountNumber"), response.jsonPath().getString("fx_transfer.quote.business_partner.bank_account_number"));
        int oldBalance = response.body().jsonPath().getInt("balance.from_amount");
        int newBalance = response.body().jsonPath().getInt("balance.to_amount");
        AssertHelper.compareEquals(testConfig, "Balance update", Integer.parseInt(testConfig.getRunTimeProperty("sourceAmount")), oldBalance - newBalance);
        testConfig.putRunTimeProperty("transactionUuid", response.body().jsonPath().getString("uuid"));
    }

    private void verifyDebitTransactionsListResponse(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
        JSONArray array = new JSONArray(new JSONObject(response.body().asString()).getJSONArray("data"));
        boolean isExisted = IntStream.range(0, array.length())
                .anyMatch(i -> array.getJSONObject(i).getString("uuid").equals(testConfig.getRunTimeProperty("transactionUuid")));
        AssertHelper.compareTrue(testConfig, "Is transaction existed?", isExisted);
    }

    private void verifySgdTransactionDetail(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
        AssertHelper.compareEquals(testConfig, "type", "debit", response.jsonPath().getString("type"));
        AssertHelper.compareEquals(testConfig, "counterparty_name", testConfig.testData.get("recipientName"), response.jsonPath().getString("counterparty_name"));
        AssertHelper.compareEquals(testConfig, "counterparty_code", testConfig.testData.get("recipientAccountNumber"), response.jsonPath().getString("counterparty_code"));
        AssertHelper.compareEquals(testConfig, "Debit account Uuid", testConfig.getRunTimeProperty("sgdAccountUuid"), response.jsonPath().getString("debit_account.uuid"));
        AssertHelper.compareEquals(testConfig, "Debit account Type", "current", response.jsonPath().getString("debit_account.type"));
        AssertHelper.compareEquals(testConfig, "Debit account Label", "SGD account", response.jsonPath().getString("debit_account.label"));
        AssertHelper.compareEquals(testConfig, "Debit Transaction Amount", -Integer.parseInt(testConfig.testData.get("amount")), Integer.parseInt(response.jsonPath().getString("quarantined_transaction.source_amount")));
    }

    private void verifyLocalTransferWithBudgetCorrect(Response response)
    {
        JSONObject obj = new JSONObject(response.body().asString());
        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
        AssertHelper.compareEquals(testConfig, "status", "OK", response.jsonPath().getString("status"));
        double fromAmount = obj.getJSONObject("transaction").getJSONObject("balance").getDouble("from_amount");
        double toAmount = obj.getJSONObject("transaction").getJSONObject("balance").getDouble("to_amount");
        AssertHelper.compareEquals(testConfig, "transferAmount", Double.parseDouble(testConfig.getRunTimeProperty("amount")), fromAmount - toAmount);
        testConfig.putRunTimeProperty("transactionUuid", response.jsonPath().getString("transaction.uuid"));
    }

    private void verifyIfSpecificDebitAccountPresent(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
        JSONArray array = new JSONArray(response.body().asString());
        boolean isExist = false;
        for (int i = 0; i < array.length(); i++)
        {
            JSONObject object = array.getJSONObject(i);
            if (object.getString("currency_code").equals(testConfig.getRunTimeProperty("currencyCode")))
            {
                isExist = true;
                break;
            }
        }
        AssertHelper.compareTrue(testConfig, "Debit account", isExist);
    }

    private void verifyCreatedPendingActions(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 201, response.statusCode());
        AssertHelper.compareEquals(testConfig, "action", "LocalFxTransferAction", response.jsonPath().getString("action"));
        AssertHelper.compareEquals(testConfig, "source_currency_code", testConfig.testData.get("sourceCurrencyCode"), response.jsonPath().getString("payload.source_currency_code"));
        AssertHelper.compareEquals(testConfig, "target_currency_code", testConfig.testData.get("targetCurrencyCode"), response.jsonPath().getString("payload.target_currency_code"));
        AssertHelper.compareEquals(testConfig, "source_amount", testConfig.testData.get("sourceAmount"), response.jsonPath().get("payload.source_amount").toString());
        AssertHelper.compareEquals(testConfig, "authorizations.approve", false, response.jsonPath().get("authorizations.approve"));
    }

    private void verifyApprovedPendingActions(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
        AssertHelper.compareEquals(testConfig, "action", "LocalFxTransferAction", response.jsonPath().getString("action"));
        AssertHelper.compareEquals(testConfig, "source_currency_code", testConfig.testData.get("sourceCurrencyCode"), response.jsonPath().getString("payload.source_currency_code"));
        AssertHelper.compareEquals(testConfig, "target_currency_code", testConfig.testData.get("targetCurrencyCode"), response.jsonPath().getString("payload.target_currency_code"));
        AssertHelper.compareEquals(testConfig, "source_amount", testConfig.testData.get("sourceAmount"), response.jsonPath().get("payload.source_amount").toString());
        AssertHelper.compareEquals(testConfig, "state_code", "PAEX", response.jsonPath().get("state_code"));

    }

    private void verifyPendingActions(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
        AssertHelper.compareEquals(testConfig, "recipient_name", testConfig.testData.get("recipientName"), response.jsonPath().getList("payload.recipient_account_name").get(0));
        AssertHelper.compareEquals(testConfig, "source_currency_code", testConfig.testData.get("sourceCurrencyCode"), response.jsonPath().getList("payload.source_currency_code").get(0));
        AssertHelper.compareEquals(testConfig, "target_currency_code", testConfig.testData.get("targetCurrencyCode"), response.jsonPath().getList("payload.target_currency_code").get(0));
        AssertHelper.compareEquals(testConfig, "source_amount", testConfig.testData.get("sourceAmount"), response.jsonPath().getList("payload.source_amount").get(0).toString());
        AssertHelper.compareEquals(testConfig, "authorizations.approve", false, response.jsonPath().getList("authorizations.approve").get(0));
        if (!response.jsonPath().getList("uuid").isEmpty())
        {
            testConfig.putRunTimeProperty("pendingActionUuid", response.jsonPath().getList("uuid").get(0));
            testConfig.putRunTimeProperty("pendingActionList", response.jsonPath().getList("uuid"));
        }
    }

    private void verifyRequirementDataSubmit(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
        AssertHelper.assertNotNull(testConfig, "neo_remittance_transaction", response.jsonPath().getString("neo_requirements.neo_remittance_transaction"));
        testConfig.putRunTimeProperty("neoRemittanceTransactionOrder", response.jsonPath().getString("neo_requirements.neo_remittance_transaction"));
    }

    private void verifyRequirementData(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
        AssertHelper.compareEquals(testConfig, "neo_requirements", 0, response.jsonPath().getList("neo_requirements").size());
    }

    private void verifyTransferWiseRequirementData(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
        AssertHelper.compareEquals(testConfig, "requirements", 1, response.jsonPath().getList("requirements").size());
    }

    private void verifyGetDebitAccount(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
        JSONArray jsonArray = new JSONArray(response.body().asString());
        for (int i = 0; i < jsonArray.length(); i++)
        {
            switch (jsonArray.getJSONObject(i).getString("currency_code").toLowerCase())
            {
                case "sgd" ->
                        AssertHelper.compareEquals(testConfig, "sgd_account_uuid", testConfig.testData.get("sgdAccountUuid"), jsonArray.getJSONObject(i).getString("uuid"));
                case "idr" ->
                        AssertHelper.compareEquals(testConfig, "idr_account_uuid", testConfig.testData.get("idrAccountUuid"), jsonArray.getJSONObject(i).getString("uuid"));
                case "usd" ->
                        AssertHelper.compareEquals(testConfig, "usd_account_uuid", testConfig.testData.get("usdAccountUuid"), jsonArray.getJSONObject(i).getString("uuid"));
                case "hkd" ->
                        AssertHelper.compareEquals(testConfig, "hkd_account_uuid", testConfig.testData.get("hkdAccountUuid"), jsonArray.getJSONObject(i).getString("uuid"));
                case "eur" ->
                        AssertHelper.compareEquals(testConfig, "eur_account_uuid", testConfig.testData.get("eurAccountUuid"), jsonArray.getJSONObject(i).getString("uuid"));
                default -> testConfig.logFail("No case defined");
            }
        }
    }

    private void verifyGetChargeAccount(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
        AssertHelper.compareEquals(testConfig, "type", "charge", response.jsonPath().getString("[0].type"));
        testConfig.putRunTimeProperty("chargeAccountUuid", response.jsonPath().getString("[0].uuid"));
    }

    private void verifyQuarantinedTransaction(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
        AssertHelper.compareEquals(testConfig, "type", "debit", response.jsonPath().getString("type"));
        AssertHelper.compareEquals(testConfig, "currency_code", testConfig.testData.get("chargeAccountCurrencyCode"), response.jsonPath().getString("currency_code"));
        AssertHelper.compareEquals(testConfig, "counterparty_name", testConfig.testData.get("recipientName"), response.jsonPath().getString("counterparty_name"));
        AssertHelper.compareEquals(testConfig, "counterparty_code", testConfig.testData.get("recipientAccountNumber"), response.jsonPath().getString("counterparty_code"));
        AssertHelper.compareEquals(testConfig, "Charge account Uuid", testConfig.getRunTimeProperty("chargeAccountUuid"), response.jsonPath().getString("debit_account.uuid"));
        AssertHelper.compareEquals(testConfig, "Charge account Type", "charge", response.jsonPath().getString("debit_account.type"));
        AssertHelper.compareEquals(testConfig, "Charge account Label", "Advance limit", response.jsonPath().getString("debit_account.label"));
        AssertHelper.compareEquals(testConfig, "Quarantined Transaction Amount", -Integer.parseInt(testConfig.testData.get("amount")), Integer.parseInt(response.jsonPath().getString("quarantined_transaction.source_amount")));
        AssertHelper.assertNotNull(testConfig, "Quarantined Transaction State code", response.jsonPath().getString("quarantined_transaction.state_code"));
        AssertHelper.assertNotNull(testConfig, "Quarantined Transaction reference_code", response.jsonPath().getString("quarantined_transaction.reference_code"));
        AssertHelper.assertNotNull(testConfig, "Quarantined Transaction UUID", response.jsonPath().getString("quarantined_transaction.uuid"));
        testConfig.putRunTimeProperty("quarantinedUuid", response.jsonPath().getString("quarantined_transaction.uuid"));
        testConfig.putRunTimeProperty("quarantinedReferenceCode", response.jsonPath().getString("quarantined_transaction.reference_code"));
        testConfig.putRunTimeProperty("quarantinedStateCode", response.jsonPath().getString("quarantined_transaction.state_code"));

    }

    private void verifyMakeFxTransfer(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 201, response.statusCode());
        AssertHelper.compareEquals(testConfig, "counterparty_name", testConfig.testData.get("recipientName"), response.jsonPath().getString("fx_transfer.account_holder_name"));
        AssertHelper.compareEquals(testConfig, "source_currency_code", testConfig.testData.get("sourceCurrencyCode"), response.jsonPath().getString("fx_transfer.quote.source_currency_code"));
        AssertHelper.compareEquals(testConfig, "target_currency_code", testConfig.testData.get("targetCurrencyCode"), response.jsonPath().getString("fx_transfer.quote.target_currency_code"));
        AssertHelper.compareEquals(testConfig, "source_amount", testConfig.testData.get("sourceAmount"), response.jsonPath().getString("fx_transfer.quote.source_amount"));
        double sourceAmount = Double.parseDouble(testConfig.testData.get("sourceAmount"));
        double rate;
        double fee;
        double jsonAmount;
        String isTemporary;
        String uuid, quoteUuid;
        if (response.jsonPath().getString("transaction") != null)
        {
            rate = Double.parseDouble(response.jsonPath().getString("transaction.fx_transfer.quote.rate"));
            fee = Double.parseDouble(response.jsonPath().getString("transaction.fx_transfer.quote.external_fee_amount"));
            jsonAmount = Double.parseDouble(response.jsonPath().getString("transaction.fx_transfer.quote.target_amount"));
            isTemporary = response.jsonPath().getString("transaction.fx_transfer.quote.is_temporary");
            uuid = response.jsonPath().getString("transaction.fx_transfer.uuid");
            quoteUuid = response.jsonPath().getString("transaction.fx_transfer.quote.uuid");
        } else
        {
            rate = Double.parseDouble(response.jsonPath().getString("fx_transfer.quote.rate"));
            fee = Double.parseDouble(response.jsonPath().getString("fx_transfer.quote.external_fee_amount"));
            jsonAmount = Double.parseDouble(response.jsonPath().getString("fx_transfer.quote.target_amount"));
            isTemporary = response.jsonPath().getString("fx_transfer.quote.is_temporary");
            uuid = response.jsonPath().getString("fx_transfer.uuid");
            quoteUuid = response.jsonPath().getString("fx_transfer.quote.uuid");
        }
        double targetAmount = Math.round((sourceAmount - fee) * rate);
        AssertHelper.compareTrue(testConfig, "target_amount", Math.round(targetAmount / 1000) == Math.round(jsonAmount / 1000));
        AssertHelper.compareTrue(testConfig, "rate", rate > 0);
        AssertHelper.compareEquals(testConfig, "is_temporary", testConfig.testData.get("isTemporary"), isTemporary);
        AssertHelper.assertNotNull(testConfig, "fx_transfer_uuid", uuid);
        AssertHelper.compareEquals(testConfig, "quote_uuid", testConfig.getRunTimeProperty("fxQuoteUuid"), quoteUuid);
    }

    private void verifyMakeAdvanceTransfer(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
        AssertHelper.compareEquals(testConfig, "status", "OK", response.jsonPath().getString("status"));
        double fromAmount = response.jsonPath().getDouble("transaction.balance.from_amount");
        double toAmount = response.jsonPath().getDouble("transaction.balance.to_amount");
        AssertHelper.compareEquals(testConfig, "Transfer Amount", Double.parseDouble(testConfig.testData.get("amount")), fromAmount - toAmount);
        testConfig.putRunTimeProperty("transactionUuid", response.jsonPath().getString("transaction.uuid"));
        testConfig.putRunTimeProperty("transactionId", response.jsonPath().getString("transaction_id"));
    }

    private void verifyMakeUsdFxTransferWeekend(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 503, response.statusCode());
        AssertHelper.compareEquals(testConfig, "error", PaymentHelper.paymentStaticDataBase.getMakeTransferUsdFxOnWeekendMessage(), response.jsonPath().getString("error"));
    }

    private void verifyCreateFxQuotes(Response response)
    {
        String expectedSourceCurrency = Objects.nonNull(testConfig.testData.get("sourceCurrencyCode")) ? testConfig.testData.get("sourceCurrencyCode") : testConfig.getRunTimeProperty("currencyCode");
        String expectedTargetCurrency = Objects.nonNull(testConfig.testData.get("targetCurrencyCode")) ? testConfig.testData.get("targetCurrencyCode") : testConfig.getRunTimeProperty("recipientCurrencyCode");
        String expectedSourceAmount = Objects.nonNull(testConfig.testData.get("sourceAmount")) ? testConfig.testData.get("sourceAmount") : testConfig.getRunTimeProperty("sourceAmount");
        String expectedExternalService = Objects.nonNull(testConfig.testData.get("externalService")) ? testConfig.testData.get("externalService") : testConfig.getRunTimeProperty("externalService");
        AssertHelper.compareEquals(testConfig, "Status Code", 201, response.statusCode());
        AssertHelper.assertNotNull(testConfig, "fxQuoteUuid", response.jsonPath().getString("uuid"));
        AssertHelper.compareEquals(testConfig, "source_currency_code", expectedSourceCurrency, response.jsonPath().getString("source_currency_code"));
        AssertHelper.compareEquals(testConfig, "target_currency_code", expectedTargetCurrency, response.jsonPath().getString("target_currency_code"));
        AssertHelper.compareEquals(testConfig, "source_amount", expectedSourceAmount, response.jsonPath().getString("source_amount"));
        long sourceAmount = Long.parseLong(expectedSourceAmount);
        double rate = Double.parseDouble(response.jsonPath().getString("rate"));
        double fee = Double.parseDouble(response.jsonPath().getString("external_fee_amount"));
        double targetAmount = Math.round((sourceAmount - fee) * rate);
        AssertHelper.compareTrue(testConfig, "target_amount", Math.round(targetAmount / 1000) == Math.round(((double) response.jsonPath().getInt("target_amount") / 1000)));
        AssertHelper.compareTrue(testConfig, "rate", rate > 0);
        AssertHelper.compareEquals(testConfig, "external_service", expectedExternalService, response.jsonPath().getString("external_service"));
        if (Objects.nonNull(testConfig.testData.get("externalFeeAmount")))
        {
            AssertHelper.compareEquals(testConfig, "external_fee_amount", Integer.parseInt(testConfig.testData.get("externalFeeAmount")) / 100000, response.jsonPath().getInt("external_fee_amount") / 100000);
        }
        if (Objects.nonNull(testConfig.testData.get("isTemporary")))
        {
            AssertHelper.compareEquals(testConfig, "is_temporary", testConfig.testData.get("isTemporary"), response.jsonPath().getString("is_temporary"));
        }
        testConfig.putRunTimeProperty("rate", response.jsonPath().getDouble("rate"));
        testConfig.putRunTimeProperty("targetAmount", response.jsonPath().getString("target_amount"));
        testConfig.putRunTimeProperty("fxQuoteUuid", response.jsonPath().getString("uuid"));
    }

    private void verifyGetSgdRecipient(Response response)
    {
        AssertHelper.compareEquals(testConfig, "Status Code", 200, response.statusCode());
        AssertHelper.compareEquals(testConfig, "recipient_uuid", testConfig.testData.get("recipientUuid"), response.jsonPath().getString("data[0].uuid"));
        AssertHelper.compareEquals(testConfig, "recipient_name", testConfig.testData.get("recipientName"), response.jsonPath().getString("data[0].name"));
        AssertHelper.compareEquals(testConfig, "recipient_currency_code", testConfig.testData.get("recipientCurrencyCode"), response.jsonPath().getString("data[0].currency_code"));
        testConfig.putRunTimeProperty("recipientBankCode", response.jsonPath().getString("data[0].counterparty_details[0].bank_code"));
        testConfig.putRunTimeProperty("counterPartyUuid", response.jsonPath().getString("data[0].uuid"));
    }

    public void setDebitAccountUuid(PaymentJsonDetails paymentJsonDetails, PaymentEnums.CurrencyEnum currency)
    {
        testConfig.putRunTimeProperty("currencyCode", currency.name());
        Response response = sendRequestAndGetResponse(PaymentApiDetails.GetDebitAccountWithQueryParams, null);
        verifyApiResponse(response, PaymentApiDetails.GetDebitAccount, paymentJsonDetails);
        JSONArray array = new JSONArray(response.body().asString());
        String debitAccountId = IntStream.range(0, array.length()).mapToObj(array::getJSONObject)
                .filter(obj -> obj.getString("currency_code").equals(testConfig.getRunTimeProperty("currencyCode")))
                .findFirst()
                .map(obj -> obj.getString("uuid"))
                .orElse(null);
        testConfig.putRunTimeProperty("debitAccountUuid", debitAccountId);
    }

    public void cleanPendingActions(PaymentJsonDetails paymentJsonDetails)
    {
        Response response = sendRequestAndGetResponse(PaymentApiDetails.GetPendingActions, null);
        verifyApiResponse(response, PaymentApiDetails.GetPendingActions, paymentJsonDetails);
        if (testConfig.getRunTimeProperty("pendingActionList") != null)
        {
            for (String pendingActionUuid : testConfig.getRunTimeProperty("pendingActionList").replace("[", "").replace("]", "").split(","))
            {
                testConfig.putRunTimeProperty("pendingActionUuid", pendingActionUuid.trim());
                sendRequestAndGetResponse(PaymentApiDetails.DeletePendingActions, null);
                verifyApiResponse(response, PaymentApiDetails.DeletePendingActions, PaymentJsonDetails.GetCleanUpResponse);
            }
        } else
        {
            testConfig.logComment("No pending actions found to clean up");
        }
    }

    public void createAndVerifyFxQuoteData(PaymentEnums.CurrencyEnum sourceCurrency, PaymentEnums.CurrencyEnum targetCurrency, PaymentEnums.ExternalService service)
    {
        testConfig.putRunTimeProperty("sourceAmount", DataGenerator.generateRandomNumberInIntRange(3000, 10000));
        testConfig.putRunTimeProperty("sourceCurrencyCode", sourceCurrency.name());
        testConfig.putRunTimeProperty("recipientCurrencyCode", targetCurrency.name());
        testConfig.putRunTimeProperty("externalService", service.getService());
        Response response = sendRequestAndGetResponse(PaymentApiDetails.CreateFxQuotes, PaymentJsonDetails.CreateFxQuotesRequestSchema);
        verifyApiResponse(response, PaymentApiDetails.CreateFxQuotes, PaymentJsonDetails.CreateFxQuotesSuccessfulResponse);
    }

    public void getCounterpartyInfoByCurrencyCode(PaymentEnums.CurrencyEnum currency)
    {
        testConfig.putRunTimeProperty("search", currency.name());
        PaymentJsonDetails paymentJsonDetails = null;
        switch (currency)
        {
            case THB:
                paymentJsonDetails = PaymentJsonDetails.GetRecipientSuccessfulResponseTHB;
                break;
            case IDR:
                paymentJsonDetails = PaymentJsonDetails.GetRecipientSuccessfulResponseIDR;
                break;
            case SGD:
                paymentJsonDetails = PaymentJsonDetails.GetRecipientSuccessfulResponseSGD;
                break;
            case CAD:
                paymentJsonDetails = PaymentJsonDetails.GetRecipientSuccessfulResponseCAD;
                break;
            default:
                paymentJsonDetails = PaymentJsonDetails.GetRecipientSuccessfulResponse;
        }
        Response response = sendRequestAndGetResponse(PaymentApiDetails.GetRecipient, null);
        verifyApiResponse(response, PaymentApiDetails.GetRecipient, paymentJsonDetails);
        JSONObject obj = new JSONObject(response.body().asString());
        JSONArray arr = obj.getJSONArray("data");
        for (int i = 0; i < arr.length(); i++)
        {
            if (arr.getJSONObject(i).getString("currency_code").equals(currency.name()))
            {
                testConfig.putRunTimeProperty("counterPartyUuid", arr.getJSONObject(i).getString("uuid"));
                testConfig.putRunTimeProperty("recipientName", arr.getJSONObject(i).getString("name"));
                testConfig.putRunTimeProperty("recipientBankCode", arr.getJSONObject(i).getJSONArray("counterparty_details").getJSONObject(0).getString("bank_code"));
                testConfig.putRunTimeProperty("recipientBankAccountNumber", arr.getJSONObject(i).getJSONArray("counterparty_details").getJSONObject(0).getString("bank_account_number"));
                break;
            }
        }
        testConfig.putRunTimeProperty("amount", DataGenerator.generateRandomNumberInIntRange(1000000, 1500000));
    }

    public void checkIfTransactionExistsWithRetry(int threshold)
    {
        int i = 0;
        boolean isExists = false;
        final int waitTime = 3;
        do
        {
            Response response = sendRequestAndGetResponse(PaymentApiDetails.GetDebitTransactionsListByBudget, null);
            if (response.getStatusCode() != 200)
            {
                i++;
                WaitHelper.waitForSeconds(testConfig, waitTime);
            } else
            {
                JSONArray array = new JSONObject(response.body().asString()).getJSONArray("data");
                List<String> transactionList = IntStream.range(0, array.length()).mapToObj(idx -> array.getJSONObject(idx).getString("uuid")).toList();
                if (!transactionList.contains(testConfig.getRunTimeProperty("transactionUuid")))
                {
                    WaitHelper.waitForSeconds(testConfig, waitTime);
                    i++;
                } else
                {
                    isExists = true;
                    testConfig.logPass("Transaction list contain transaction with id " + testConfig.getRunTimeProperty("transactionUuid"));
                }
            }
        } while (i < threshold && !isExists);
        if (i == threshold && !isExists)
        {
            testConfig.logFail("Transaction list doesn't contain transaction with id " + testConfig.getRunTimeProperty("transactionUuid") + " after " + threshold * waitTime);
        }
    }

    public void rejectQuarantinedTransaction(Config testConfig, AccessHelper accessHelper)
    {
        testConfig.putRunTimeProperty(ApiDetails.Headers.Authorization.getValue(), "Bearer " + accessHelper.getAuthToken());
        testConfig.putRunTimeProperty(ApiDetails.Headers.xexampleApplication.getValue(), AccessHelper.accessStaticDataBase.getexampleApplication());
        testConfig.putRunTimeProperty(ApiDetails.Headers.xexampleBusinessUuid.getValue(), testConfig.testData.get("accountUuid"));
        String updatedAmount = String.valueOf(Integer.parseInt(testConfig.testData.get("amount")) * 100);
        testConfig.testData.put("amount", updatedAmount);
        testConfig.logStep("Execute API GET /v1/debit-transactions/ - Get Transaction by reference ID");
        Response getTransactionDetailResponse = sendRequestAndGetResponse(PaymentApiDetails.GetTransactionByReferenceId, null);
        verifyApiResponse(getTransactionDetailResponse, PaymentApiDetails.GetTransactionByReferenceId, PaymentJsonDetails.GetTransactionByReferenceIdResponse);
        testConfig.logStep("Execute API GET /v1/debit-transactions/{$transactionUuid} - Verify check Transaction detail");
        Response getTransactionDetailResponse1 = sendRequestAndGetResponse(PaymentApiDetails.GetTransactionDetail, null);
        if (testConfig.testData.get("transferCurrency").equalsIgnoreCase("IDR"))
            verifyApiResponse(getTransactionDetailResponse1, PaymentApiDetails.GetTransactionDetail, PaymentJsonDetails.GetQuarantinedTransactionResponseIDR);
        else
            verifyApiResponse(getTransactionDetailResponse1, PaymentApiDetails.GetTransactionDetail, PaymentJsonDetails.GetQuarantinedTransactionResponse);
        DashAccessHelper dashAccessHelper = new DashAccessHelper(testConfig, 1);
        dashAccessHelper.doLogin();
        DashPaymentHelper dashPaymentHelper = new DashPaymentHelper(testConfig, 1);
        testConfig.logStep("Execute API GET /dashboard/quarantined-transactions - Get Quarantined Transaction List from dash and check current Transaction");
        Response quarantinedTransactionList = dashPaymentHelper.sendRequestAndGetResponse(DashPaymentApiDetails.GetQuarantinedTransactionList, null);
        dashPaymentHelper.verifyApiResponse(quarantinedTransactionList, DashPaymentApiDetails.GetQuarantinedTransactionList, DashPaymentJsonDetails.GetQuarantinedTransactionListResponse);

        testConfig.logStep("Execute API GET /dashboard/quarantined-transactions/{$quarantinedUuid} - Get Quarantined Transaction Detail from dash");
        Response quarantinedTransactionDetail = dashPaymentHelper.sendRequestAndGetResponse(DashPaymentApiDetails.GetQuarantinedTransactionDetailFromDash, null);
        dashPaymentHelper.verifyApiResponse(quarantinedTransactionDetail, DashPaymentApiDetails.GetQuarantinedTransactionDetailFromDash, DashPaymentJsonDetails.GetQuarantinedTransactionDetailResponse);

        testConfig.logStep("Execute API PUT /dashboard/quarantined-transactions/{$quarantinedUuid}/approve - Approve Quarantined Transaction from dash");
        Response quarantinedTransactionApproved = dashPaymentHelper.sendRequestAndGetResponse(DashPaymentApiDetails.RejectQuarantinedTransaction, DashPaymentJsonDetails.RejectQuarantinedTransactionRequestSchema);
        dashPaymentHelper.verifyApiResponse(quarantinedTransactionApproved, DashPaymentApiDetails.RejectQuarantinedTransaction, null);

        testConfig.logStep("Execute API GET /dashboard/quarantined-transactions/{$quarantinedUuid} - Get Quarantined Transaction state and check it should be Rejected");
        dashPaymentHelper.verifyRejectedQuarantinedTransaction();
    }

    public void createPendingActionsForSgdFxTransfer()
    {
        setDebitAccountUuid(PaymentJsonDetails.GetDebitAccountSuccessfulResponse, PaymentEnums.CurrencyEnum.SGD);

        Response getRecipientResponse = sendRequestAndGetResponse(PaymentApiDetails.GetRecipient, null);
        verifyApiResponse(getRecipientResponse, PaymentApiDetails.GetRecipient, PaymentJsonDetails.GetRecipientSuccessfulResponse);

        Response createFxQuotesResponse = sendRequestAndGetResponse(PaymentApiDetails.CreateFxQuotes, PaymentJsonDetails.CreateSgdFxQuotesRequestSchema);
        verifyApiResponse(createFxQuotesResponse, PaymentApiDetails.CreateFxQuotes, PaymentJsonDetails.CreateFxQuotesSuccessfulResponse);

        Response requirementDataResponse = sendRequestAndGetResponse(PaymentApiDetails.RequirementData, PaymentJsonDetails.RequirementDataRequestSchema);
        verifyApiResponse(requirementDataResponse, PaymentApiDetails.RequirementData, PaymentJsonDetails.RequirementDataSuccessfulTransferWiseResponse);

        Response requirementDataSubmitResponse = sendRequestAndGetResponse(PaymentApiDetails.RequirementDataSubmit, PaymentJsonDetails.RequirementDataSubmitRequestSchema);
        verifyApiResponse(requirementDataSubmitResponse, PaymentApiDetails.RequirementDataSubmit, PaymentJsonDetails.RequirementDataSubmitTransferWiseResponse);

        cleanPendingActions(PaymentJsonDetails.EmptyResponse);
        Response makeFxTransferResponse = sendRequestAndGetResponse(PaymentApiDetails.CreatePendingActions, PaymentJsonDetails.CreatePendingActionLocalFxRequestSchema);
        verifyApiResponse(makeFxTransferResponse, PaymentApiDetails.CreatePendingActions, PaymentJsonDetails.CreatePendingActionLocalFxSuccessfulResponse);

        Response getPendingActionsResponse = sendRequestAndGetResponse(PaymentApiDetails.GetPendingActions, null);
        verifyApiResponse(getPendingActionsResponse, PaymentApiDetails.GetPendingActions, PaymentJsonDetails.GetPendingActionsSuccessfulResponse);
    }

    public void createUiAdvanceTransfer(Config testConfig, PaymentEnums.CurrencyEnum currencyEnum)
    {
        testConfig.logStep("Click on 'Submit a transfer' CTA button and select a random recipient in the list");
        if (StringUtils.isEmpty(testConfig.getRunTimeProperty("userRole")))
        {
            advanceLimitPage = advanceLimitPage.clickSubmitATransferButton();
            recipientsPage = advanceLimitPage.verifyAdditionalFeeModalAndClickContinue();
        }
        transferPage = recipientsPage.selectARecipient(currencyEnum);

        testConfig.logStep("Input Local transfer info, fill additional information & click Next button, then validate instant Advance local transfer info");
        additionalInformationPage = (AdditionalInformationPage) transferPage.inputInstantLocalTransferInfo(true);
        reviewTransferPage = additionalInformationPage.fillAdditionalInformation();
        reviewTransferPage.validateInstantLocalTransferInfo(true);

        testConfig.logStep("Click on Submit button and then validate advance transfer info on Transfer success overview screen");
        transferSuccessOverviewPage = reviewTransferPage.submitTransfer(PaymentEnums.TransferType.valueOf(testConfig.testData.get("transferType")));
        transferSuccessOverviewPage.validateLocalTransferInfo(testConfig.testData);
    }
}

